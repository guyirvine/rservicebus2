#!/usr/bin/env ruby

require 'yaml'
require 'beanstalk-client'
require 'rservicebus2'

def return_msg(beanstalk, job, request_nbr)
  first_match = 'ruby/object:'
  payload = job.body

  first_index = payload.index(first_match)
  start_index = payload.index(first_match, first_index + 1) + first_match.length

  msg_name = payload.match('(\w*)', start_index)[1]

  msg = RServiceBus2.safe_load(payload)

  if msg.last_error_string.nil?
    puts "*** Requested msg, #{request_nbr}, does not have a sourceQueue to
          which it can be returned"
    puts '*** Only errored msgs can be Returned'
    puts '*** Generally, msgs would not be manually moved between queues'
    puts '*** If you do need to, try'
    puts '*** beanstalk-admin-dump <source queue name> | beanstalk-admin-load
          <destination queue name>'

    job.release
    return
  end

  queue_name = msg.last_error_source_queue
  puts '#' + "#{request_nbr}: #{msg_name} to #{queue_name}"

  beanstalk.use(queue_name)
  beanstalk.put(payload)

  job.delete
end

index = nil
if ARGV.length == 0
  queue_name = 'error'
elsif ARGV.length == 1
  queue_name = ARGV[0]
elsif ARGV.length == 2
  queue_name = ARGV[0]
  index = ARGV[1].to_i
else
  abort('Usage: ReturnMessagesToSourceQueue [queue name] [index]')
end

begin
  host = 'localhost:11300'
  beanstalk = Beanstalk::Pool.new([host])

  tubes = beanstalk.list_tubes[host]
  abort("Nothing waiting on the Beanstalk queue, #{queue_name}") unless
    tubes.include?(queue_name)

  tube_stats = beanstalk.stats_tube(queue_name)
  number_of_messages = tube_stats['current-jobs-ready']
  if index.nil?
    puts
    puts "Attempting to return #{number_of_messages} to their source queue"
    puts

    begin
      beanstalk.watch(queue_name)
      1.upto(number_of_messages) do |request_nbr|
        job = beanstalk.reserve 1

        return_msg(beanstalk, job, request_nbr)
      end
    rescue StandardError => e
      if e.message == 'TIMED_OUT'
      else
        raise
      end
    end
  else
    if index > number_of_messages
      puts "*** Requested msg, #{index}, is greater than the number of msgs in
            the queue, #{number_of_messages}"
      puts '*** Try a smaller index, or remove the index number to return all
            msgs'
      abort
    end

    puts
    puts "Attempting to msg number, #{index} to it's source queue"
    puts

    begin
      beanstalk.watch(queue_name)
      job_list = []
      1.upto(index - 1) do |request_nbr|
        job = beanstalk.reserve 1
        job_list << job
      end
      job = beanstalk.reserve 1
      return_msg(beanstalk, job, index)

      job_list.each(&:release)

    rescue StandardError => e
      if e.message == 'TIMED_OUT'
      else
        raise
      end
    end
  end

  rescue Beanstalk::NotConnected
    puts 'Beanstalk not running'
  end
